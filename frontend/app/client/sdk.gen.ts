// This file is auto-generated by @hey-api/openapi-ts

import type {
  Options as ClientOptions,
  Composable,
  TDataShape,
  Client,
} from "./client";
import type {
  AuthControllerLoginResponse,
  AuthControllerLoginData,
  AuthControllerRegisterResponse,
  AuthControllerRegisterData,
  UsersControllerGetUserResponse,
  UsersControllerGetUserData,
  AdminUsersControllerGetUsersResponse,
  AdminUsersControllerGetUsersData,
  AdminUsersControllerSuspendUserResponse,
  AdminUsersControllerSuspendUserData,
  AdminUsersControllerActivateUserResponse,
  AdminUsersControllerActivateUserData,
  ProfileControllerProfileResponse,
  ProfileControllerProfileData,
  QuotesControllerAcceptQuoteData,
  QuotesControllerRejectQuoteData,
  QuotesControllerGetQuotesData,
  QuotesControllerGetQuoteData,
  QuoteRequestsControllerListRequestedQuotesResponse,
  QuoteRequestsControllerListRequestedQuotesData,
  QuoteRequestsControllerRequestQuoteResponse,
  QuoteRequestsControllerRequestQuoteData,
  QuoteRequestsControllerRequestQuoteDetailResponse,
  QuoteRequestsControllerRequestQuoteDetailData,
  QuoteRequestsControllerRespondQuoteRequestData,
} from "./types.gen";
import { client as _heyApiClient } from "./client.gen";

export type Options<
  TComposable extends Composable,
  TData extends TDataShape = TDataShape,
  ResT = unknown,
  DefaultT = undefined,
> = ClientOptions<TComposable, TData, ResT, DefaultT> & {
  /**
   * You can provide a client instance returned by `createClient()` instead of
   * individual options. This might be also useful if you want to implement a
   * custom client.
   */
  client?: Client;
  /**
   * You can pass arbitrary values through the `meta` object. This can be
   * used to access values that aren't defined as part of the SDK function.
   */
  meta?: Record<string, unknown>;
};

/**
 * Grant access to all users
 */
export const authControllerLogin = <
  TComposable extends Composable,
  DefaultT extends AuthControllerLoginResponse = AuthControllerLoginResponse,
>(
  options: Options<
    TComposable,
    AuthControllerLoginData,
    AuthControllerLoginResponse,
    DefaultT
  >,
) => {
  return (options.client ?? _heyApiClient).post<
    TComposable,
    AuthControllerLoginResponse | DefaultT,
    unknown,
    DefaultT
  >({
    url: "/api/auth/login",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * User registration
 */
export const authControllerRegister = <
  TComposable extends Composable,
  DefaultT extends
    AuthControllerRegisterResponse = AuthControllerRegisterResponse,
>(
  options: Options<
    TComposable,
    AuthControllerRegisterData,
    AuthControllerRegisterResponse,
    DefaultT
  >,
) => {
  return (options.client ?? _heyApiClient).post<
    TComposable,
    AuthControllerRegisterResponse | DefaultT,
    unknown,
    DefaultT
  >({
    url: "/api/auth/register",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Returns specific user information
 */
export const usersControllerGetUser = <
  TComposable extends Composable,
  DefaultT extends
    UsersControllerGetUserResponse = UsersControllerGetUserResponse,
>(
  options: Options<
    TComposable,
    UsersControllerGetUserData,
    UsersControllerGetUserResponse,
    DefaultT
  >,
) => {
  return (options.client ?? _heyApiClient).get<
    TComposable,
    UsersControllerGetUserResponse | DefaultT,
    unknown,
    DefaultT
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/users/{id}",
    ...options,
  });
};

/**
 * Returns list of users. Accessible only by PLATFORM_ADMIN
 */
export const adminUsersControllerGetUsers = <
  TComposable extends Composable,
  DefaultT extends
    AdminUsersControllerGetUsersResponse = AdminUsersControllerGetUsersResponse,
>(
  options: Options<
    TComposable,
    AdminUsersControllerGetUsersData,
    AdminUsersControllerGetUsersResponse,
    DefaultT
  >,
) => {
  return (options.client ?? _heyApiClient).get<
    TComposable,
    AdminUsersControllerGetUsersResponse | DefaultT,
    unknown,
    DefaultT
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/admin/users",
    ...options,
  });
};

/**
 * Suspend user account. Accessible only by PLATFORM_ADMIN
 */
export const adminUsersControllerSuspendUser = <
  TComposable extends Composable,
  DefaultT extends
    AdminUsersControllerSuspendUserResponse = AdminUsersControllerSuspendUserResponse,
>(
  options: Options<
    TComposable,
    AdminUsersControllerSuspendUserData,
    AdminUsersControllerSuspendUserResponse,
    DefaultT
  >,
) => {
  return (options.client ?? _heyApiClient).post<
    TComposable,
    AdminUsersControllerSuspendUserResponse | DefaultT,
    unknown,
    DefaultT
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/admin/users/{id}/suspend",
    ...options,
  });
};

/**
 * Activate user account. Accessible only by PLATFORM_ADMIN
 */
export const adminUsersControllerActivateUser = <
  TComposable extends Composable,
  DefaultT extends
    AdminUsersControllerActivateUserResponse = AdminUsersControllerActivateUserResponse,
>(
  options: Options<
    TComposable,
    AdminUsersControllerActivateUserData,
    AdminUsersControllerActivateUserResponse,
    DefaultT
  >,
) => {
  return (options.client ?? _heyApiClient).post<
    TComposable,
    AdminUsersControllerActivateUserResponse | DefaultT,
    unknown,
    DefaultT
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/admin/users/{id}/activate",
    ...options,
  });
};

/**
 * Current user profile
 */
export const profileControllerProfile = <
  TComposable extends Composable,
  DefaultT extends
    ProfileControllerProfileResponse = ProfileControllerProfileResponse,
>(
  options: Options<
    TComposable,
    ProfileControllerProfileData,
    ProfileControllerProfileResponse,
    DefaultT
  >,
) => {
  return (options.client ?? _heyApiClient).get<
    TComposable,
    ProfileControllerProfileResponse | DefaultT,
    unknown,
    DefaultT
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/profile",
    ...options,
  });
};

/**
 * Accept quote. ðŸš§
 */
export const quotesControllerAcceptQuote = <
  TComposable extends Composable,
  DefaultT = undefined,
>(
  options: Options<
    TComposable,
    QuotesControllerAcceptQuoteData,
    unknown,
    DefaultT
  >,
) => {
  return (options.client ?? _heyApiClient).post<
    TComposable,
    unknown | DefaultT,
    unknown,
    DefaultT
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/quotes/{id}/accept",
    ...options,
  });
};

/**
 * Reject quote ðŸš§
 */
export const quotesControllerRejectQuote = <
  TComposable extends Composable,
  DefaultT = undefined,
>(
  options: Options<
    TComposable,
    QuotesControllerRejectQuoteData,
    unknown,
    DefaultT
  >,
) => {
  return (options.client ?? _heyApiClient).post<
    TComposable,
    unknown | DefaultT,
    unknown,
    DefaultT
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/quotes/{id}/reject",
    ...options,
  });
};

/**
 * Fetch quotes ðŸš§
 */
export const quotesControllerGetQuotes = <
  TComposable extends Composable,
  DefaultT = undefined,
>(
  options: Options<
    TComposable,
    QuotesControllerGetQuotesData,
    unknown,
    DefaultT
  >,
) => {
  return (options.client ?? _heyApiClient).get<
    TComposable,
    unknown | DefaultT,
    unknown,
    DefaultT
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/quotes",
    ...options,
  });
};

/**
 * Fetch quote details ðŸš§
 */
export const quotesControllerGetQuote = <
  TComposable extends Composable,
  DefaultT = undefined,
>(
  options: Options<
    TComposable,
    QuotesControllerGetQuoteData,
    unknown,
    DefaultT
  >,
) => {
  return (options.client ?? _heyApiClient).get<
    TComposable,
    unknown | DefaultT,
    unknown,
    DefaultT
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/quotes/{id}",
    ...options,
  });
};

/**
 * List requested quotes
 */
export const quoteRequestsControllerListRequestedQuotes = <
  TComposable extends Composable,
  DefaultT extends
    QuoteRequestsControllerListRequestedQuotesResponse = QuoteRequestsControllerListRequestedQuotesResponse,
>(
  options: Options<
    TComposable,
    QuoteRequestsControllerListRequestedQuotesData,
    QuoteRequestsControllerListRequestedQuotesResponse,
    DefaultT
  >,
) => {
  return (options.client ?? _heyApiClient).get<
    TComposable,
    QuoteRequestsControllerListRequestedQuotesResponse | DefaultT,
    unknown,
    DefaultT
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/quotes-requests",
    ...options,
  });
};

/**
 * Request a quote
 */
export const quoteRequestsControllerRequestQuote = <
  TComposable extends Composable,
  DefaultT extends
    QuoteRequestsControllerRequestQuoteResponse = QuoteRequestsControllerRequestQuoteResponse,
>(
  options: Options<
    TComposable,
    QuoteRequestsControllerRequestQuoteData,
    QuoteRequestsControllerRequestQuoteResponse,
    DefaultT
  >,
) => {
  return (options.client ?? _heyApiClient).post<
    TComposable,
    QuoteRequestsControllerRequestQuoteResponse | DefaultT,
    unknown,
    DefaultT
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/quotes-requests",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Details of requested quote, should also return corresponding quotes
 */
export const quoteRequestsControllerRequestQuoteDetail = <
  TComposable extends Composable,
  DefaultT extends
    QuoteRequestsControllerRequestQuoteDetailResponse = QuoteRequestsControllerRequestQuoteDetailResponse,
>(
  options: Options<
    TComposable,
    QuoteRequestsControllerRequestQuoteDetailData,
    QuoteRequestsControllerRequestQuoteDetailResponse,
    DefaultT
  >,
) => {
  return (options.client ?? _heyApiClient).get<
    TComposable,
    QuoteRequestsControllerRequestQuoteDetailResponse | DefaultT,
    unknown,
    DefaultT
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/quotes-requests/{id}",
    ...options,
  });
};

/**
 * Respond to a quote request. This creates a quote ðŸš§
 */
export const quoteRequestsControllerRespondQuoteRequest = <
  TComposable extends Composable,
  DefaultT = undefined,
>(
  options: Options<
    TComposable,
    QuoteRequestsControllerRespondQuoteRequestData,
    unknown,
    DefaultT
  >,
) => {
  return (options.client ?? _heyApiClient).post<
    TComposable,
    unknown | DefaultT,
    unknown,
    DefaultT
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/quotes-requests/{id}/respond",
    ...options,
  });
};
