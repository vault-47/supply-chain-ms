/* tslint:disable */
/* eslint-disable */
/**
 * Supply chain API
 * This is API for supply chain management system
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Configuration } from "./configuration";
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from "axios";
import globalAxios from "axios";
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from "./common";
import type { RequestArgs } from "./base";
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  BaseAPI,
  RequiredError,
  operationServerMap,
} from "./base";

/**
 *
 * @export
 * @interface AdminUsersControllerGetUsers200Response
 */
export interface AdminUsersControllerGetUsers200Response {
  /**
   *
   * @type {Array<UserResponseDto>}
   * @memberof AdminUsersControllerGetUsers200Response
   */
  data: Array<UserResponseDto>;
  /**
   *
   * @type {PaginationMetaDto}
   * @memberof AdminUsersControllerGetUsers200Response
   */
  meta: PaginationMetaDto;
  /**
   *
   * @type {boolean}
   * @memberof AdminUsersControllerGetUsers200Response
   */
  status?: boolean;
  /**
   *
   * @type {string}
   * @memberof AdminUsersControllerGetUsers200Response
   */
  message?: string;
}
/**
 *
 * @export
 * @interface AuthControllerLogin200Response
 */
export interface AuthControllerLogin200Response {
  /**
   *
   * @type {LoginResponseDto}
   * @memberof AuthControllerLogin200Response
   */
  data?: LoginResponseDto;
  /**
   *
   * @type {string}
   * @memberof AuthControllerLogin200Response
   */
  message?: string;
  /**
   *
   * @type {boolean}
   * @memberof AuthControllerLogin200Response
   */
  status?: boolean;
}
/**
 *
 * @export
 * @interface AuthControllerRegister200Response
 */
export interface AuthControllerRegister200Response {
  /**
   *
   * @type {UserResponseDto}
   * @memberof AuthControllerRegister200Response
   */
  data?: UserResponseDto;
  /**
   *
   * @type {string}
   * @memberof AuthControllerRegister200Response
   */
  message?: string;
  /**
   *
   * @type {boolean}
   * @memberof AuthControllerRegister200Response
   */
  status?: boolean;
}
/**
 *
 * @export
 * @interface BaseResponseDto
 */
export interface BaseResponseDto {
  /**
   *
   * @type {object}
   * @memberof BaseResponseDto
   */
  data?: object;
  /**
   *
   * @type {string}
   * @memberof BaseResponseDto
   */
  message?: string;
  /**
   *
   * @type {boolean}
   * @memberof BaseResponseDto
   */
  status?: boolean;
}
/**
 *
 * @export
 * @interface CreateRequestQuoteRequestDto
 */
export interface CreateRequestQuoteRequestDto {
  /**
   * vendor_id
   * @type {string}
   * @memberof CreateRequestQuoteRequestDto
   */
  vendor_id: string;
  /**
   * origin_address
   * @type {string}
   * @memberof CreateRequestQuoteRequestDto
   */
  origin_address: string;
  /**
   * destination_address
   * @type {string}
   * @memberof CreateRequestQuoteRequestDto
   */
  destination_address: string;
  /**
   * distance_km
   * @type {number}
   * @memberof CreateRequestQuoteRequestDto
   */
  distance_km: number;
  /**
   * weight_kg
   * @type {number}
   * @memberof CreateRequestQuoteRequestDto
   */
  weight_kg: number;
  /**
   * goods_type
   * @type {string}
   * @memberof CreateRequestQuoteRequestDto
   */
  goods_type: string;
  /**
   * additional_note
   * @type {string}
   * @memberof CreateRequestQuoteRequestDto
   */
  additional_note: string;
  /**
   * urgency
   * @type {string}
   * @memberof CreateRequestQuoteRequestDto
   */
  urgency: string;
}
/**
 *
 * @export
 * @interface LoginRequestDto
 */
export interface LoginRequestDto {
  /**
   * email
   * @type {string}
   * @memberof LoginRequestDto
   */
  email: string;
  /**
   * password
   * @type {string}
   * @memberof LoginRequestDto
   */
  password: string;
}
/**
 *
 * @export
 * @interface LoginResponseDto
 */
export interface LoginResponseDto {
  /**
   *
   * @type {string}
   * @memberof LoginResponseDto
   */
  access_token?: string;
}
/**
 *
 * @export
 * @interface PaginatedResponseDto
 */
export interface PaginatedResponseDto {
  /**
   *
   * @type {Array<Array<string>>}
   * @memberof PaginatedResponseDto
   */
  data: Array<Array<string>>;
  /**
   *
   * @type {PaginationMetaDto}
   * @memberof PaginatedResponseDto
   */
  meta: PaginationMetaDto;
}
/**
 *
 * @export
 * @interface PaginationMetaDto
 */
export interface PaginationMetaDto {
  /**
   *
   * @type {number}
   * @memberof PaginationMetaDto
   */
  totalItems: number;
  /**
   *
   * @type {number}
   * @memberof PaginationMetaDto
   */
  itemCount: number;
  /**
   *
   * @type {number}
   * @memberof PaginationMetaDto
   */
  itemsPerPage: number;
  /**
   *
   * @type {number}
   * @memberof PaginationMetaDto
   */
  totalPages: number;
  /**
   *
   * @type {number}
   * @memberof PaginationMetaDto
   */
  currentPage: number;
}
/**
 *
 * @export
 * @interface QuoteRequestResponseDto
 */
export interface QuoteRequestResponseDto {
  /**
   * id
   * @type {string}
   * @memberof QuoteRequestResponseDto
   */
  id: string;
  /**
   * qr_num
   * @type {string}
   * @memberof QuoteRequestResponseDto
   */
  qr_num: string;
  /**
   * origin_address
   * @type {string}
   * @memberof QuoteRequestResponseDto
   */
  origin_address: string;
  /**
   * destination_address
   * @type {string}
   * @memberof QuoteRequestResponseDto
   */
  destination_address: string;
  /**
   * distance_km
   * @type {number}
   * @memberof QuoteRequestResponseDto
   */
  distance_km: number;
  /**
   * weight_kg
   * @type {number}
   * @memberof QuoteRequestResponseDto
   */
  weight_kg: number;
  /**
   * goods_type
   * @type {string}
   * @memberof QuoteRequestResponseDto
   */
  goods_type: string;
  /**
   * additional_note
   * @type {string}
   * @memberof QuoteRequestResponseDto
   */
  additional_note: string;
  /**
   * urgency
   * @type {string}
   * @memberof QuoteRequestResponseDto
   */
  urgency: string;
  /**
   * status
   * @type {string}
   * @memberof QuoteRequestResponseDto
   */
  status: string;
  /**
   *
   * @type {object}
   * @memberof QuoteRequestResponseDto
   */
  created_at?: object;
  /**
   * user
   * @type {UserResponseDto}
   * @memberof QuoteRequestResponseDto
   */
  user: UserResponseDto;
  /**
   * vendor
   * @type {UserResponseDto}
   * @memberof QuoteRequestResponseDto
   */
  vendor: UserResponseDto;
}
/**
 *
 * @export
 * @interface QuoteRequestsControllerListRequestedQuotes200Response
 */
export interface QuoteRequestsControllerListRequestedQuotes200Response {
  /**
   *
   * @type {Array<QuoteRequestResponseDto>}
   * @memberof QuoteRequestsControllerListRequestedQuotes200Response
   */
  data: Array<QuoteRequestResponseDto>;
  /**
   *
   * @type {PaginationMetaDto}
   * @memberof QuoteRequestsControllerListRequestedQuotes200Response
   */
  meta: PaginationMetaDto;
  /**
   *
   * @type {boolean}
   * @memberof QuoteRequestsControllerListRequestedQuotes200Response
   */
  status?: boolean;
  /**
   *
   * @type {string}
   * @memberof QuoteRequestsControllerListRequestedQuotes200Response
   */
  message?: string;
}
/**
 *
 * @export
 * @interface QuoteRequestsControllerRequestQuote200Response
 */
export interface QuoteRequestsControllerRequestQuote200Response {
  /**
   *
   * @type {QuoteRequestResponseDto}
   * @memberof QuoteRequestsControllerRequestQuote200Response
   */
  data?: QuoteRequestResponseDto;
  /**
   *
   * @type {string}
   * @memberof QuoteRequestsControllerRequestQuote200Response
   */
  message?: string;
  /**
   *
   * @type {boolean}
   * @memberof QuoteRequestsControllerRequestQuote200Response
   */
  status?: boolean;
}
/**
 *
 * @export
 * @interface RegistrationRequestDto
 */
export interface RegistrationRequestDto {
  /**
   * email
   * @type {string}
   * @memberof RegistrationRequestDto
   */
  email: string;
  /**
   * password
   * @type {string}
   * @memberof RegistrationRequestDto
   */
  password: string;
  /**
   * Repeat password
   * @type {string}
   * @memberof RegistrationRequestDto
   */
  repeat_password: string;
  /**
   * first_name
   * @type {string}
   * @memberof RegistrationRequestDto
   */
  first_name: string;
  /**
   * last_name
   * @type {string}
   * @memberof RegistrationRequestDto
   */
  last_name: string;
  /**
   * Role must be one of PLATFORM_ADMIN
   * @type {string}
   * @memberof RegistrationRequestDto
   */
  role: RegistrationRequestDtoRoleEnum;
}

export const RegistrationRequestDtoRoleEnum = {
  PlatformAdmin: "PLATFORM_ADMIN",
  Shipper: "SHIPPER",
  Vendor: "VENDOR",
} as const;

export type RegistrationRequestDtoRoleEnum =
  (typeof RegistrationRequestDtoRoleEnum)[keyof typeof RegistrationRequestDtoRoleEnum];

/**
 *
 * @export
 * @interface UserResponseDto
 */
export interface UserResponseDto {
  /**
   *
   * @type {object}
   * @memberof UserResponseDto
   */
  id?: object;
  /**
   *
   * @type {object}
   * @memberof UserResponseDto
   */
  first_name?: object;
  /**
   *
   * @type {object}
   * @memberof UserResponseDto
   */
  last_name?: object;
  /**
   *
   * @type {object}
   * @memberof UserResponseDto
   */
  email?: object;
  /**
   *
   * @type {string}
   * @memberof UserResponseDto
   */
  account_status?: string;
  /**
   *
   * @type {string}
   * @memberof UserResponseDto
   */
  role?: string;
  /**
   *
   * @type {object}
   * @memberof UserResponseDto
   */
  created_at?: object;
}

/**
 * AdminUsersApi - axios parameter creator
 * @export
 */
export const AdminUsersApiAxiosParamCreator = function (
  configuration?: Configuration,
) {
  return {
    /**
     *
     * @summary Activate user account. Accessible only by PLATFORM_ADMIN
     * @param {string} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminUsersControllerActivateUser: async (
      id: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("adminUsersControllerActivateUser", "id", id);
      const localVarPath = `/api/admin/users/{id}/activate`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Returns list of users. Accessible only by PLATFORM_ADMIN
     * @param {number} [page] page
     * @param {number} [pageSize] pageSize
     * @param {AdminUsersControllerGetUsersRoleEnum} [role] role
     * @param {AdminUsersControllerGetUsersAccountStatusEnum} [accountStatus] accountStatus
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminUsersControllerGetUsers: async (
      page?: number,
      pageSize?: number,
      role?: AdminUsersControllerGetUsersRoleEnum,
      accountStatus?: AdminUsersControllerGetUsersAccountStatusEnum,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/admin/users`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      if (page !== undefined) {
        localVarQueryParameter["page"] = page;
      }

      if (pageSize !== undefined) {
        localVarQueryParameter["pageSize"] = pageSize;
      }

      if (role !== undefined) {
        localVarQueryParameter["role"] = role;
      }

      if (accountStatus !== undefined) {
        localVarQueryParameter["accountStatus"] = accountStatus;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Suspend user account. Accessible only by PLATFORM_ADMIN
     * @param {string} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminUsersControllerSuspendUser: async (
      id: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("adminUsersControllerSuspendUser", "id", id);
      const localVarPath = `/api/admin/users/{id}/suspend`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * AdminUsersApi - functional programming interface
 * @export
 */
export const AdminUsersApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator =
    AdminUsersApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @summary Activate user account. Accessible only by PLATFORM_ADMIN
     * @param {string} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async adminUsersControllerActivateUser(
      id: string,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<AuthControllerRegister200Response>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.adminUsersControllerActivateUser(
          id,
          options,
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["AdminUsersApi.adminUsersControllerActivateUser"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Returns list of users. Accessible only by PLATFORM_ADMIN
     * @param {number} [page] page
     * @param {number} [pageSize] pageSize
     * @param {AdminUsersControllerGetUsersRoleEnum} [role] role
     * @param {AdminUsersControllerGetUsersAccountStatusEnum} [accountStatus] accountStatus
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async adminUsersControllerGetUsers(
      page?: number,
      pageSize?: number,
      role?: AdminUsersControllerGetUsersRoleEnum,
      accountStatus?: AdminUsersControllerGetUsersAccountStatusEnum,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<AdminUsersControllerGetUsers200Response>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.adminUsersControllerGetUsers(
          page,
          pageSize,
          role,
          accountStatus,
          options,
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["AdminUsersApi.adminUsersControllerGetUsers"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Suspend user account. Accessible only by PLATFORM_ADMIN
     * @param {string} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async adminUsersControllerSuspendUser(
      id: string,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<AuthControllerRegister200Response>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.adminUsersControllerSuspendUser(
          id,
          options,
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["AdminUsersApi.adminUsersControllerSuspendUser"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
  };
};

/**
 * AdminUsersApi - factory interface
 * @export
 */
export const AdminUsersApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = AdminUsersApiFp(configuration);
  return {
    /**
     *
     * @summary Activate user account. Accessible only by PLATFORM_ADMIN
     * @param {string} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminUsersControllerActivateUser(
      id: string,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<AuthControllerRegister200Response> {
      return localVarFp
        .adminUsersControllerActivateUser(id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Returns list of users. Accessible only by PLATFORM_ADMIN
     * @param {number} [page] page
     * @param {number} [pageSize] pageSize
     * @param {AdminUsersControllerGetUsersRoleEnum} [role] role
     * @param {AdminUsersControllerGetUsersAccountStatusEnum} [accountStatus] accountStatus
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminUsersControllerGetUsers(
      page?: number,
      pageSize?: number,
      role?: AdminUsersControllerGetUsersRoleEnum,
      accountStatus?: AdminUsersControllerGetUsersAccountStatusEnum,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<AdminUsersControllerGetUsers200Response> {
      return localVarFp
        .adminUsersControllerGetUsers(
          page,
          pageSize,
          role,
          accountStatus,
          options,
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Suspend user account. Accessible only by PLATFORM_ADMIN
     * @param {string} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminUsersControllerSuspendUser(
      id: string,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<AuthControllerRegister200Response> {
      return localVarFp
        .adminUsersControllerSuspendUser(id, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * AdminUsersApi - object-oriented interface
 * @export
 * @class AdminUsersApi
 * @extends {BaseAPI}
 */
export class AdminUsersApi extends BaseAPI {
  /**
   *
   * @summary Activate user account. Accessible only by PLATFORM_ADMIN
   * @param {string} id id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AdminUsersApi
   */
  public adminUsersControllerActivateUser(
    id: string,
    options?: RawAxiosRequestConfig,
  ) {
    return AdminUsersApiFp(this.configuration)
      .adminUsersControllerActivateUser(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Returns list of users. Accessible only by PLATFORM_ADMIN
   * @param {number} [page] page
   * @param {number} [pageSize] pageSize
   * @param {AdminUsersControllerGetUsersRoleEnum} [role] role
   * @param {AdminUsersControllerGetUsersAccountStatusEnum} [accountStatus] accountStatus
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AdminUsersApi
   */
  public adminUsersControllerGetUsers(
    page?: number,
    pageSize?: number,
    role?: AdminUsersControllerGetUsersRoleEnum,
    accountStatus?: AdminUsersControllerGetUsersAccountStatusEnum,
    options?: RawAxiosRequestConfig,
  ) {
    return AdminUsersApiFp(this.configuration)
      .adminUsersControllerGetUsers(
        page,
        pageSize,
        role,
        accountStatus,
        options,
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Suspend user account. Accessible only by PLATFORM_ADMIN
   * @param {string} id id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AdminUsersApi
   */
  public adminUsersControllerSuspendUser(
    id: string,
    options?: RawAxiosRequestConfig,
  ) {
    return AdminUsersApiFp(this.configuration)
      .adminUsersControllerSuspendUser(id, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * @export
 */
export const AdminUsersControllerGetUsersRoleEnum = {
  PlatformAdmin: "PLATFORM_ADMIN",
  Shipper: "SHIPPER",
  Vendor: "VENDOR",
  Driver: "DRIVER",
} as const;
export type AdminUsersControllerGetUsersRoleEnum =
  (typeof AdminUsersControllerGetUsersRoleEnum)[keyof typeof AdminUsersControllerGetUsersRoleEnum];
/**
 * @export
 */
export const AdminUsersControllerGetUsersAccountStatusEnum = {
  Active: "ACTIVE",
  Suspended: "SUSPENDED",
  PendingVerification: "PENDING_VERIFICATION",
  Invited: "INVITED",
} as const;
export type AdminUsersControllerGetUsersAccountStatusEnum =
  (typeof AdminUsersControllerGetUsersAccountStatusEnum)[keyof typeof AdminUsersControllerGetUsersAccountStatusEnum];

/**
 * AuthApi - axios parameter creator
 * @export
 */
export const AuthApiAxiosParamCreator = function (
  configuration?: Configuration,
) {
  return {
    /**
     *
     * @summary Grant access to all users
     * @param {LoginRequestDto} loginRequestDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authControllerLogin: async (
      loginRequestDto: LoginRequestDto,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'loginRequestDto' is not null or undefined
      assertParamExists(
        "authControllerLogin",
        "loginRequestDto",
        loginRequestDto,
      );
      const localVarPath = `/api/auth/login`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        loginRequestDto,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary User registration
     * @param {RegistrationRequestDto} registrationRequestDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authControllerRegister: async (
      registrationRequestDto: RegistrationRequestDto,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'registrationRequestDto' is not null or undefined
      assertParamExists(
        "authControllerRegister",
        "registrationRequestDto",
        registrationRequestDto,
      );
      const localVarPath = `/api/auth/register`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        registrationRequestDto,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * AuthApi - functional programming interface
 * @export
 */
export const AuthApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = AuthApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @summary Grant access to all users
     * @param {LoginRequestDto} loginRequestDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async authControllerLogin(
      loginRequestDto: LoginRequestDto,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<AuthControllerLogin200Response>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.authControllerLogin(
          loginRequestDto,
          options,
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["AuthApi.authControllerLogin"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary User registration
     * @param {RegistrationRequestDto} registrationRequestDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async authControllerRegister(
      registrationRequestDto: RegistrationRequestDto,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<AuthControllerRegister200Response>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.authControllerRegister(
          registrationRequestDto,
          options,
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["AuthApi.authControllerRegister"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
  };
};

/**
 * AuthApi - factory interface
 * @export
 */
export const AuthApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = AuthApiFp(configuration);
  return {
    /**
     *
     * @summary Grant access to all users
     * @param {LoginRequestDto} loginRequestDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authControllerLogin(
      loginRequestDto: LoginRequestDto,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<AuthControllerLogin200Response> {
      return localVarFp
        .authControllerLogin(loginRequestDto, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary User registration
     * @param {RegistrationRequestDto} registrationRequestDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authControllerRegister(
      registrationRequestDto: RegistrationRequestDto,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<AuthControllerRegister200Response> {
      return localVarFp
        .authControllerRegister(registrationRequestDto, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * AuthApi - object-oriented interface
 * @export
 * @class AuthApi
 * @extends {BaseAPI}
 */
export class AuthApi extends BaseAPI {
  /**
   *
   * @summary Grant access to all users
   * @param {LoginRequestDto} loginRequestDto
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AuthApi
   */
  public authControllerLogin(
    loginRequestDto: LoginRequestDto,
    options?: RawAxiosRequestConfig,
  ) {
    return AuthApiFp(this.configuration)
      .authControllerLogin(loginRequestDto, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary User registration
   * @param {RegistrationRequestDto} registrationRequestDto
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AuthApi
   */
  public authControllerRegister(
    registrationRequestDto: RegistrationRequestDto,
    options?: RawAxiosRequestConfig,
  ) {
    return AuthApiFp(this.configuration)
      .authControllerRegister(registrationRequestDto, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * ProfileApi - axios parameter creator
 * @export
 */
export const ProfileApiAxiosParamCreator = function (
  configuration?: Configuration,
) {
  return {
    /**
     *
     * @summary Current user profile
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    profileControllerProfile: async (
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/profile`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * ProfileApi - functional programming interface
 * @export
 */
export const ProfileApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = ProfileApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @summary Current user profile
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async profileControllerProfile(
      options?: RawAxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<AuthControllerRegister200Response>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.profileControllerProfile(options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["ProfileApi.profileControllerProfile"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
  };
};

/**
 * ProfileApi - factory interface
 * @export
 */
export const ProfileApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = ProfileApiFp(configuration);
  return {
    /**
     *
     * @summary Current user profile
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    profileControllerProfile(
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<AuthControllerRegister200Response> {
      return localVarFp
        .profileControllerProfile(options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * ProfileApi - object-oriented interface
 * @export
 * @class ProfileApi
 * @extends {BaseAPI}
 */
export class ProfileApi extends BaseAPI {
  /**
   *
   * @summary Current user profile
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProfileApi
   */
  public profileControllerProfile(options?: RawAxiosRequestConfig) {
    return ProfileApiFp(this.configuration)
      .profileControllerProfile(options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * QuoteRequestsApi - axios parameter creator
 * @export
 */
export const QuoteRequestsApiAxiosParamCreator = function (
  configuration?: Configuration,
) {
  return {
    /**
     *
     * @summary List requested quotes
     * @param {number} [page] page
     * @param {number} [pageSize] pageSize
     * @param {QuoteRequestsControllerListRequestedQuotesUrgencyEnum} [urgency] urgency
     * @param {string} [search] search
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    quoteRequestsControllerListRequestedQuotes: async (
      page?: number,
      pageSize?: number,
      urgency?: QuoteRequestsControllerListRequestedQuotesUrgencyEnum,
      search?: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/quotes-requests`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      if (page !== undefined) {
        localVarQueryParameter["page"] = page;
      }

      if (pageSize !== undefined) {
        localVarQueryParameter["pageSize"] = pageSize;
      }

      if (urgency !== undefined) {
        localVarQueryParameter["urgency"] = urgency;
      }

      if (search !== undefined) {
        localVarQueryParameter["search"] = search;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Request a quote
     * @param {CreateRequestQuoteRequestDto} createRequestQuoteRequestDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    quoteRequestsControllerRequestQuote: async (
      createRequestQuoteRequestDto: CreateRequestQuoteRequestDto,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'createRequestQuoteRequestDto' is not null or undefined
      assertParamExists(
        "quoteRequestsControllerRequestQuote",
        "createRequestQuoteRequestDto",
        createRequestQuoteRequestDto,
      );
      const localVarPath = `/api/quotes-requests`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        createRequestQuoteRequestDto,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Details of requested quote, should also return corresponding quotes
     * @param {string} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    quoteRequestsControllerRequestQuoteDetail: async (
      id: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("quoteRequestsControllerRequestQuoteDetail", "id", id);
      const localVarPath = `/api/quotes-requests/{id}`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Respond to a quote request. This creates a quote 🚧
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    quoteRequestsControllerRespondQuoteRequest: async (
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/quotes-requests/{id}/respond`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * QuoteRequestsApi - functional programming interface
 * @export
 */
export const QuoteRequestsApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator =
    QuoteRequestsApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @summary List requested quotes
     * @param {number} [page] page
     * @param {number} [pageSize] pageSize
     * @param {QuoteRequestsControllerListRequestedQuotesUrgencyEnum} [urgency] urgency
     * @param {string} [search] search
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async quoteRequestsControllerListRequestedQuotes(
      page?: number,
      pageSize?: number,
      urgency?: QuoteRequestsControllerListRequestedQuotesUrgencyEnum,
      search?: string,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<QuoteRequestsControllerListRequestedQuotes200Response>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.quoteRequestsControllerListRequestedQuotes(
          page,
          pageSize,
          urgency,
          search,
          options,
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap[
          "QuoteRequestsApi.quoteRequestsControllerListRequestedQuotes"
        ]?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Request a quote
     * @param {CreateRequestQuoteRequestDto} createRequestQuoteRequestDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async quoteRequestsControllerRequestQuote(
      createRequestQuoteRequestDto: CreateRequestQuoteRequestDto,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<QuoteRequestsControllerRequestQuote200Response>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.quoteRequestsControllerRequestQuote(
          createRequestQuoteRequestDto,
          options,
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap[
          "QuoteRequestsApi.quoteRequestsControllerRequestQuote"
        ]?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Details of requested quote, should also return corresponding quotes
     * @param {string} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async quoteRequestsControllerRequestQuoteDetail(
      id: string,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<QuoteRequestsControllerRequestQuote200Response>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.quoteRequestsControllerRequestQuoteDetail(
          id,
          options,
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap[
          "QuoteRequestsApi.quoteRequestsControllerRequestQuoteDetail"
        ]?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Respond to a quote request. This creates a quote 🚧
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async quoteRequestsControllerRespondQuoteRequest(
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.quoteRequestsControllerRespondQuoteRequest(
          options,
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap[
          "QuoteRequestsApi.quoteRequestsControllerRespondQuoteRequest"
        ]?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
  };
};

/**
 * QuoteRequestsApi - factory interface
 * @export
 */
export const QuoteRequestsApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = QuoteRequestsApiFp(configuration);
  return {
    /**
     *
     * @summary List requested quotes
     * @param {number} [page] page
     * @param {number} [pageSize] pageSize
     * @param {QuoteRequestsControllerListRequestedQuotesUrgencyEnum} [urgency] urgency
     * @param {string} [search] search
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    quoteRequestsControllerListRequestedQuotes(
      page?: number,
      pageSize?: number,
      urgency?: QuoteRequestsControllerListRequestedQuotesUrgencyEnum,
      search?: string,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<QuoteRequestsControllerListRequestedQuotes200Response> {
      return localVarFp
        .quoteRequestsControllerListRequestedQuotes(
          page,
          pageSize,
          urgency,
          search,
          options,
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Request a quote
     * @param {CreateRequestQuoteRequestDto} createRequestQuoteRequestDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    quoteRequestsControllerRequestQuote(
      createRequestQuoteRequestDto: CreateRequestQuoteRequestDto,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<QuoteRequestsControllerRequestQuote200Response> {
      return localVarFp
        .quoteRequestsControllerRequestQuote(
          createRequestQuoteRequestDto,
          options,
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Details of requested quote, should also return corresponding quotes
     * @param {string} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    quoteRequestsControllerRequestQuoteDetail(
      id: string,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<QuoteRequestsControllerRequestQuote200Response> {
      return localVarFp
        .quoteRequestsControllerRequestQuoteDetail(id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Respond to a quote request. This creates a quote 🚧
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    quoteRequestsControllerRespondQuoteRequest(
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<void> {
      return localVarFp
        .quoteRequestsControllerRespondQuoteRequest(options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * QuoteRequestsApi - object-oriented interface
 * @export
 * @class QuoteRequestsApi
 * @extends {BaseAPI}
 */
export class QuoteRequestsApi extends BaseAPI {
  /**
   *
   * @summary List requested quotes
   * @param {number} [page] page
   * @param {number} [pageSize] pageSize
   * @param {QuoteRequestsControllerListRequestedQuotesUrgencyEnum} [urgency] urgency
   * @param {string} [search] search
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof QuoteRequestsApi
   */
  public quoteRequestsControllerListRequestedQuotes(
    page?: number,
    pageSize?: number,
    urgency?: QuoteRequestsControllerListRequestedQuotesUrgencyEnum,
    search?: string,
    options?: RawAxiosRequestConfig,
  ) {
    return QuoteRequestsApiFp(this.configuration)
      .quoteRequestsControllerListRequestedQuotes(
        page,
        pageSize,
        urgency,
        search,
        options,
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Request a quote
   * @param {CreateRequestQuoteRequestDto} createRequestQuoteRequestDto
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof QuoteRequestsApi
   */
  public quoteRequestsControllerRequestQuote(
    createRequestQuoteRequestDto: CreateRequestQuoteRequestDto,
    options?: RawAxiosRequestConfig,
  ) {
    return QuoteRequestsApiFp(this.configuration)
      .quoteRequestsControllerRequestQuote(
        createRequestQuoteRequestDto,
        options,
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Details of requested quote, should also return corresponding quotes
   * @param {string} id id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof QuoteRequestsApi
   */
  public quoteRequestsControllerRequestQuoteDetail(
    id: string,
    options?: RawAxiosRequestConfig,
  ) {
    return QuoteRequestsApiFp(this.configuration)
      .quoteRequestsControllerRequestQuoteDetail(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Respond to a quote request. This creates a quote 🚧
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof QuoteRequestsApi
   */
  public quoteRequestsControllerRespondQuoteRequest(
    options?: RawAxiosRequestConfig,
  ) {
    return QuoteRequestsApiFp(this.configuration)
      .quoteRequestsControllerRespondQuoteRequest(options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * @export
 */
export const QuoteRequestsControllerListRequestedQuotesUrgencyEnum = {
  Standard: "STANDARD",
  Express: "EXPRESS",
} as const;
export type QuoteRequestsControllerListRequestedQuotesUrgencyEnum =
  (typeof QuoteRequestsControllerListRequestedQuotesUrgencyEnum)[keyof typeof QuoteRequestsControllerListRequestedQuotesUrgencyEnum];

/**
 * QuotesApi - axios parameter creator
 * @export
 */
export const QuotesApiAxiosParamCreator = function (
  configuration?: Configuration,
) {
  return {
    /**
     *
     * @summary Accept quote. 🚧
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    quotesControllerAcceptQuote: async (
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/quotes/{id}/accept`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Fetch quote details 🚧
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    quotesControllerGetQuote: async (
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/quotes/{id}`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Fetch quotes 🚧
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    quotesControllerGetQuotes: async (
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/quotes`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Reject quote 🚧
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    quotesControllerRejectQuote: async (
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/quotes/{id}/reject`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * QuotesApi - functional programming interface
 * @export
 */
export const QuotesApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = QuotesApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @summary Accept quote. 🚧
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async quotesControllerAcceptQuote(
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.quotesControllerAcceptQuote(options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["QuotesApi.quotesControllerAcceptQuote"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Fetch quote details 🚧
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async quotesControllerGetQuote(
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.quotesControllerGetQuote(options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["QuotesApi.quotesControllerGetQuote"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Fetch quotes 🚧
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async quotesControllerGetQuotes(
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.quotesControllerGetQuotes(options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["QuotesApi.quotesControllerGetQuotes"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Reject quote 🚧
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async quotesControllerRejectQuote(
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.quotesControllerRejectQuote(options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["QuotesApi.quotesControllerRejectQuote"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
  };
};

/**
 * QuotesApi - factory interface
 * @export
 */
export const QuotesApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = QuotesApiFp(configuration);
  return {
    /**
     *
     * @summary Accept quote. 🚧
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    quotesControllerAcceptQuote(
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<void> {
      return localVarFp
        .quotesControllerAcceptQuote(options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Fetch quote details 🚧
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    quotesControllerGetQuote(
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<void> {
      return localVarFp
        .quotesControllerGetQuote(options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Fetch quotes 🚧
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    quotesControllerGetQuotes(
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<void> {
      return localVarFp
        .quotesControllerGetQuotes(options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Reject quote 🚧
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    quotesControllerRejectQuote(
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<void> {
      return localVarFp
        .quotesControllerRejectQuote(options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * QuotesApi - object-oriented interface
 * @export
 * @class QuotesApi
 * @extends {BaseAPI}
 */
export class QuotesApi extends BaseAPI {
  /**
   *
   * @summary Accept quote. 🚧
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof QuotesApi
   */
  public quotesControllerAcceptQuote(options?: RawAxiosRequestConfig) {
    return QuotesApiFp(this.configuration)
      .quotesControllerAcceptQuote(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Fetch quote details 🚧
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof QuotesApi
   */
  public quotesControllerGetQuote(options?: RawAxiosRequestConfig) {
    return QuotesApiFp(this.configuration)
      .quotesControllerGetQuote(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Fetch quotes 🚧
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof QuotesApi
   */
  public quotesControllerGetQuotes(options?: RawAxiosRequestConfig) {
    return QuotesApiFp(this.configuration)
      .quotesControllerGetQuotes(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Reject quote 🚧
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof QuotesApi
   */
  public quotesControllerRejectQuote(options?: RawAxiosRequestConfig) {
    return QuotesApiFp(this.configuration)
      .quotesControllerRejectQuote(options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * UsersApi - axios parameter creator
 * @export
 */
export const UsersApiAxiosParamCreator = function (
  configuration?: Configuration,
) {
  return {
    /**
     *
     * @summary Returns specific user information
     * @param {string} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersControllerGetUser: async (
      id: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("usersControllerGetUser", "id", id);
      const localVarPath = `/api/users/{id}`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * UsersApi - functional programming interface
 * @export
 */
export const UsersApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = UsersApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @summary Returns specific user information
     * @param {string} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async usersControllerGetUser(
      id: string,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<AuthControllerRegister200Response>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.usersControllerGetUser(id, options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["UsersApi.usersControllerGetUser"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
  };
};

/**
 * UsersApi - factory interface
 * @export
 */
export const UsersApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = UsersApiFp(configuration);
  return {
    /**
     *
     * @summary Returns specific user information
     * @param {string} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersControllerGetUser(
      id: string,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<AuthControllerRegister200Response> {
      return localVarFp
        .usersControllerGetUser(id, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * UsersApi - object-oriented interface
 * @export
 * @class UsersApi
 * @extends {BaseAPI}
 */
export class UsersApi extends BaseAPI {
  /**
   *
   * @summary Returns specific user information
   * @param {string} id id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UsersApi
   */
  public usersControllerGetUser(id: string, options?: RawAxiosRequestConfig) {
    return UsersApiFp(this.configuration)
      .usersControllerGetUser(id, options)
      .then((request) => request(this.axios, this.basePath));
  }
}
